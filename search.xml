<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Blog美化——首页显示标签]]></title>
    <url>%2Fposts%2Fblog_meihua_tags.html</url>
    <content type="text"><![CDATA[前言 其他主题我不知道，但next主题Mist样式首页文章底下不显示标签，我个人喜欢首页文章下面也可以看到标签。Next其他样式可能还是没有标签好看。 因为文章首页隐藏的notshow会影响到首页显示标签,所以会在修改的一部分中提到首页隐藏的内容。查看修改首页隐藏指定文章 Step1：修改主题的index.swig正式内容：主题可能各不一样，但原理都是一样的，我拿我使用的next主题来示范。路径：\themes\next\layout\index.swig找到以下代码： 123456789&#123;% block content %&#125; &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include &apos;_partials/pagination.swig&apos; %&#125;&#123;% endblock %&#125; 通过文章的for循环，判断每个文章有没有标签，如果有就显示在首页。改为： 123456789101112131415161718&#123;% block content %&#125; &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &lt;!-- 首页显示标签 --&gt; &#123;% if post.tags and post.tags.length %&#125; &lt;div class=&quot;post-tags&quot;&gt; &#123;% for tag in post.tags %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; &lt;!-- 首页显示标签 end --&gt; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include &apos;_partials/pagination.swig&apos; %&#125;&#123;% endblock %&#125; 补充内容：以下是给纯小白讲的，如果同时使用了首页隐藏指定文章，则首页隐藏的if语句要把标签的if语句给包含进去,否则文章消失了标签还在。大致修改成这样： 12345678910111213141516171819202122&#123;% block content %&#125; &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;% for post in page.posts %&#125; &lt;!-- 在这里判断首页隐藏是否为true --&gt; &#123;% if post.notshow != true %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &lt;!-- 首页显示标签 --&gt; &#123;% if post.tags and post.tags.length %&#125; &lt;div class=&quot;post-tags&quot;&gt; &#123;% for tag in post.tags %&#125; &lt;a href=&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel=&quot;tag&quot;&gt;&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; &#123;&#123; tag.name &#125;&#125;&lt;/a&gt; &#123;% endfor %&#125; &lt;/div&gt; &#123;% endif %&#125; &lt;!-- 首页显示标签 end --&gt; &#123;% endif %&#125; &lt;!-- 所有判断结束 --&gt; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include &apos;_partials/pagination.swig&apos; %&#125;&#123;% endblock %&#125; Step2：修改CSS此时你可能发现标签是不是和文章间距很大？不要慌。（只适用于Next.Mist）在themes\next\source\css\_schemes\Mist\_posts-expanded.styl的_posts-expanded.styl中找到代码： 1234567.post-tags &#123; text-align: left; a &#123; padding: 1px 5px; background: $whitesmoke; border-bottom: none;&#125; 修改为： 123456789101112 .post-tags &#123; text-align: left; a &#123; padding: 1px 5px; background: $whitesmoke; border-bottom: none; &#125; a:hover &#123; background: $grey-light; &#125;/*下面的意思是上方文章的距离为2px，下方的距离为20px*/ margin-top: 2px; margin-bottom: 20px; &#125; 结语完成了！！效果参考首页]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gitalk评论系统如何只在文章和指定自建页面内出现]]></title>
    <url>%2Fposts%2Fblog_gitalk_about.html</url>
    <content type="text"><![CDATA[前言 我使用Gitalk评论系统主要原因是我可以查看给我评论的各位Github大佬的仓库，说不准可以学点啥。其次是Gitalk虽然要登录Github，但它的PC端和手机端界面都看着舒服，而且评论数据在自己可控范围，不会随意被ban。 gitalk：一个基于 Github Issue 和 Preact 开发的评论插件官方Demo：https://gitalk.github.io/官方文档说明：点击查看 以下是我希望Gitalk设置的效果： 在文章和指定自建页面（关于about页面）出现，不在标签tags和分类categories出现评论系统。 配置在主题的配置文件_config.yml里直接可以设置，方便未来信息的更改。 自动初始化。 但接踵而来的问题是Gitalk设置的效果并不理想。一开始参考了asdfv1929大佬的设置方法点击查看方法，设置略微麻烦（万一哪天想删掉Gitalk还有点麻烦），设置完后发现效果不是我想象中的那样（标签tags和分类categories，甚至是自建的热度排行页面都有Gitalk评论系统）。 【点击查看如何建热度排行页面】接着我参考cr1753343566大佬直接在post.swing中添加Gitalk代码点击查看方法。但最后发现只能在文章中出现评论系统，在自建的关于about页面无法实现评论系统（想拿来当留言板），而且没办法自动初始化，这一点官方设置可以解决。其次，一旦想同时在文章和多个自建页面设置，每次想修改，必须打开post.swing找到那一堆代码修改。可视化和可操控性略差。 于是我决定结合cr1753343566大佬的简便操作和asdfv1929大佬的可操作性。再加上自己的研究来完成我理想的效果。（其实asdfv1929的方法不麻烦，只是需要在各个不同文件夹操作，对于我来说有点眼花缭乱😝丢人了）Σ(っ °Д °;)っ 第一步：新建一个OAuth Application在GitHub上注册新应用，链接：https://github.com/settings/applications/new点击注册后，页面跳转如下，其中Client ID和Client Secret在后面的配置中需要用到，到时复制粘贴即可：[1] 不小心关掉页面，找不到Client ID的话，可以参考下面步骤找到：或者打开https://github.com/settings/developers 第二步：本地设置创建新的页面（关于About）在Git中输入hexo n page &lt;页面名字&gt;创建页面（创建过的读者无视这条） 例如： gitalk.swig新建/themes/next/layout/_macro/gitalk.swig文件和/themes/next/layout/gitalk.swig文件，并且2个都添加内容：（在2个目录下建相同的gitalk.swig，如果有大佬可以只建一个文件的办法可以评论告诉我） 12345678910111213141516&lt;!-- Link Gitalk 的支持文件 --&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;&lt;script src=&quot;https://unpkg.com/gitalk@latest/dist/gitalk.min.js&quot;&gt;&lt;/script&gt; &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt; &lt;script type=&quot;text/javascript&quot;&gt; var gitalk = new Gitalk(&#123; clientID: &apos;&#123;&#123; theme.gitalk.ClientID &#125;&#125;&apos;, clientSecret: &apos;&#123;&#123; theme.gitalk.ClientSecret &#125;&#125;&apos;, repo: &apos;&#123;&#123; theme.gitalk.repo &#125;&#125;&apos;, owner: &apos;&#123;&#123; theme.gitalk.githubID &#125;&#125;&apos;, admin: [&apos;&#123;&#123; theme.gitalk.adminUser &#125;&#125;&apos;], id: location.pathname, distractionFreeMode: &apos;&#123;&#123; theme.gitalk.distractionFreeMode &#125;&#125;&apos; &#125;); gitalk.render(&apos;gitalk-container&apos;);&lt;/script&gt; &lt;!-- Gitalk end --&gt; _config.yml在主题配置文件next/_config.yml中添加如下内容： # 配置gitalk gitalk: enable: true //是否可见 githubID: Github的用户名 //如：AhaoHe repo: 仓库名称 //如：ahaohe.github.io ClientID: 12345678 //填上面得到的Client ID ClientSecret: ssssssss //填上面得到的Client Secret adminUser: XXXXX //指定可初始化评论账户 distractionFreeMode: true post.swing找到/themes/next/layout/_macro/post.swing文件，打开并在最下面且在&#123;% endmacro %&#125;上面添加如下内容： 12345&lt;div&gt; &#123;% if not is_index and theme.gitalk.enable %&#125; &#123;% include &apos;gitalk.swig&apos; %&#125; &#123;% endif %&#125;&lt;/div&gt; 如图所示： page.swig找到/themes/next/layout/page.swig文件，打开并在&#123;% else %&#125;上面和各种&#123;% elif page.type === ‘xxxx’ %&#125;下面添加如下内容： 123456789about可以替换成你想出现Gitalk的自建页面的名字 ↓&#123;% elif page.type === &apos;about&apos; %&#125; &#123;&#123; page.content &#125;&#125; &lt;div&gt; &#123;% if not is_index and theme.gitalk.enable %&#125; &#123;% include &apos;gitalk.swig&apos; %&#125; &#123;% endif %&#125; &lt;/div&gt; 如图所示： 完成/展示只要初始化过一个评论区，其他评论区也会自动初始化。点击查看展示页面 结语 在文章和指定自建页面（关于about页面）出现，不在标签tags和分类categories出现评论系统。 配置在主题的配置文件_config.yml里直接可以设置，方便未来信息的更改。 自动初始化。 以上三点都完成了，基本符合我的预期要求 错误解决主要问题有： 使用Github账户登陆评论区时会返回首页或者404报错 使用Github账户登陆评论区时401报错 未找到相关的Issues进行评论，请联系XXX进行创建 Error Not Found Error: Validation Failed 评论初始化404 以下链接也许会帮助你解决问题： (推荐)【已解决】Hexo NexT使用Gitalk未找到相关的Issues进行评论Error:Validation Failed- Junzhou Liu hexo next 主题配置 gitalk 评论后无法初始化创建 issue GitTalk评论配置-评论初始化404-LSCR7 / cr1753343566（虽然底下给出了解决办法，但我本人使用后好像没效果。） 参考文献 ☝[1] Hexo NexT主题中集成gitalk评论系统 . asdfv1929 [引用日期 2019-4-11]☝[2] GitTalk评论配置 . LSCR7 [引用日期 2019-4-11]]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基础用法(二)]]></title>
    <url>%2Fposts%2Fgit_base_2.html</url>
    <content type="text"><![CDATA[承接上回 Git基础操作（一） 的讲解。本篇主要讲解仓库的管理，以及成员如何合作开发。 Git常用操作 查看git所有的配置清单git config --list 从远处仓库中克隆代码git clone https://gitee.com/simoniublog/cardemo.git Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。 把文件添加到版本库，并提交。添加文件到Git仓库，分两步： 使用命令git add &lt;file&gt;，注意，可反复多次使用，添加多个文件；&lt;file&gt;为文件名.后缀。 使用命令git commit -m &lt;message&gt;，提交完成。可以看Git基础操作（一）了解具体。 从本地仓库中删除并恢复 使用命令git rm &lt;file&gt;或者git rm -rf &lt;dir&gt;，注意，rm只能删除文件rm -rf删除文件夹； 使用命令git status，查看本地仓库和远程仓库的差异； 使用命令git reset HEAD，恢复删除； 使用命令git checkout，将暂存区文件拉回到本地； 添加仓库开发成员暂无 创建和合并分支不同分支就相当于两个互不干扰的小仓库。 使用命令git branch，查看当前分支； 使用命令git checkout -b dev，创建并切换分支； 使用git commit -m，git push origin dev提交分支。 使用命令git merge dev，合并分支。 使用git branch -d dev，删除分支。注意：删除的是本地分支。 使用git push origin --delete dev，删除远程分支。 使用命令git branch，查看当前分支； 使用命令git checkout -b dev，创建并切换分支； 使用git commit -m，git push origin dev提交分支。//第一张图没提交信息是错误示范，正确：git commit -m &lt;message&gt; 使用命令git merge dev，合并分支。 使用git branch -d dev，删除分支。注意：删除的是本地分支。 使用git push origin --delete dev，删除远程分支。 多人协作。创建了分支后，并不一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？ Git常见的分支命名有以下四种，每种都具有特殊的含义： master分支是主分支，因此要时刻与远程同步； dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步； bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug； feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。 总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定！因此，多人协作的工作模式通常是这样： 首先，可以试图用git push origin &lt;branch-name&gt;推送自己的修改； 如果推送失败，则因为远程分支比你的本地更新快，需要先用git pull试图合并； 如果合并有冲突，则解决冲突，并在本地提交； 没有冲突或者解决掉冲突后，再用git push origin &lt;branch-name&gt;推送就能成功！ 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;。 这就是多人协作的工作模式，一旦熟悉了，就非常简单。 深刻理解origin的含义暂无 Git fork使用使用 git remote -v 查看远程状态。 添加一个将被同步给 fork 远程的上游仓库A 。 git remote add upstream https://gitee.com/simoniublog/cardemo.git git fetch upstream,默认会将远程所有的分支fetch下来]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Word转Markdown的方法]]></title>
    <url>%2Fposts%2Fword-to-markdown.html</url>
    <content type="text"><![CDATA[下载安装实在是太麻烦了。直接上在线网站： https://word-to-markdown.herokuapp.com/ 当然在线的肯定也会有问题有坑。这个网站表格处理有时候会有问题，自己稍微修改下就行。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git基础用法(一)]]></title>
    <url>%2Fposts%2Fgit_base.html</url>
    <content type="text"><![CDATA[Git(读音为/gɪt/。)是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。 Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。本文章以Git+码云为例。本篇主要将如何进行初步设置，可以完成普通的提交至仓库。点击查看Git基础用法（二） Git下载安装 下载Git 点击下载不会下载就别用了😝 安装Git 一路next，默认安装即可。 如何使用码云/GitHub发布和更新项目因为码云和Github界面很像，差距也就是Github是英文版。由于码云是国产的，速度会快一点，国内还是推荐用码云。方便下载。 注册码云账号https://gitee.com/ 登录码云创建项目 1.设置码云公钥在随意的文件夹中右键出现如下图 接下来的操作都是通过Git Bash Here。Git GUI是可视化操作，没了解过。就不深究了。接下来都是在如下界面输入内容！ 步骤： 生成公钥输入ssh-keygen -t rsa -C &quot;你的邮箱@xxx.com&quot; 出现# Generating public/private rsa key pair... 三次回车即可生成 ssh key 找到公钥，复制公钥输入cat ~/.ssh/id\_rsa.pub 或者在C:\Users\Lenovo\.ssh中找到id_rsa.pub文件（用文本文件打开） 出现公钥（因为重要性，我就不展示了）。查看公钥（记住千万不要把私钥文件 id_rsa 透露给任何人） 将公钥内容（全部）复制并粘贴（注意：公钥内容以ssh-rsa开头） 2.初始化本地项目设置git全局账号，目的是告诉 git 你是谁，你输入的信息将出现在你创建的提交中。你的名字或昵称就是如下图所示地方的内容。 Github类似，也是在域名中可以找到用户名。 git config --global user.name 你的名字或昵称; git config --global user.email 你的邮箱; 如果出现：error: cannot overwrite multiple values with a single value使用如下命令： git config --global --replace-all user.email 输入你的邮箱 git config --global --replace-all user.name 输入你的用户名 3.在你的需要初始化版本库的文件夹中执行：比如我要建博客，我在自己的F盘中建了个blog文件夹。在F:\blog中右键打开git bash。 git init git remote add origin &lt;你的项目地址&gt; //注:项目地址形式为:https://gitee.com/xxx/xxx.git或者 git@gitee.com:xxx/xxx.git在进入仓库后右端如下地方可以找到 例子：git remote add origin git@gitee.com:yyss18/yyss.git 4.完成第一次提交 git pull origin master &lt;这里需要修改/添加文件，否则与原文件相比就没有变动&gt; git add . //添加当前目录的全部内容 git commit -m &quot;第一次提交&quot;补充：git commit -m &lt;message&gt;中&lt;message&gt;为每次提交所备注的内容。 git push origin master 示例： 5.更新提交项目 cd 文件夹路径 git add . git commit -m &quot;这里输入更新的提示内容&quot; git push origin master 注意：如果第4步报错，可以使用 git push -f origin master, 来强制覆盖。]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML的特殊符合大全]]></title>
    <url>%2Fposts%2Fhtml_special_fh.html</url>
    <content type="text"><![CDATA[HTML特殊符号手机用户建议横屏观看 符号 说明 编码 符号 说明 编码 &quot; 双引号 &amp;quot; &amp; AND符号 &amp;amp; &lt; 小于号 &amp;lt; &gt; 大于号 &amp;gt; &nbsp; 空格 &amp;nbsp; &iquest; 倒问号 &amp;iquest; &laquo; 双左箭头 &amp;laquo; &raquo; 双右箭头 &amp;raquo; &lsquo; 双左单引号 &amp;lsquo; &rsquo; 右单引号 &amp;rsquo; &ldquo; 左双引号 &amp;ldquo; &rdquo; 右双引号 &amp;rdquo; &para; 段落符号 &amp;para; &sect; 章节符号 &amp;sect; &copy; 版权所有符号 &amp;copy; &reg; 注册商标符号 &amp;reg; &trade; 商标符号 &amp;trade; &euro; 欧元符号 &amp;euro; &cent; 美分符号 &amp;cent; &pound; 英镑符号 &amp;pound; &yen; 日圆/人民币符号 &amp;yen; &hellip; … &amp;hellip; &oplus; &amp;oplus; &times; 乘号 &amp;times; &divide; 除号 &amp;divide; &plusmn; 正负符号 &amp;plusmn; &fnof; function符号 &amp;fnof; &radic; 根号 &amp;radic; &infin; 无限大符号 &amp;infin; &ang; 角度符号 &amp;ang; &int; 微积分符号 &amp;int; &deg; 度数符号 &amp;deg; &ne; 不等于符号 &amp;ne; &equiv; 相等符号 &amp;equiv; &le; 小于等于符号 &amp;le; &ge; 大于等于符号 &amp;ge; &perp; 垂直符号 &amp;perp; &frac12; 二分之一符号 &amp;frac12; &frac14; 四分之一符号 &amp;frac14; &frac34; 四分之三符号 &amp;frac34; &permil; 百分符号 &amp;permil; &there4; 所以符号 &amp;there4; &pi; 圆周率符号 &amp;pi; &sup1; 批注1符号 &amp;sup1; &sup2; 批注2符号、平方 &amp;sup2; &sup3; 批注3符号、立方 &amp;sup3; &larr; 向左箭头 &amp;larr; &uarr; 向上箭头 &amp;uarr; &rarr; 向右箭头 &amp;rarr; &darr; 向下箭头 &amp;darr; &harr; 双向箭头 &amp;harr; &lArr; 双线向左箭头 &amp;lArr; &uArr; 双线向上箭头 &amp;uArr; &rArr; 双线向右箭头 &amp;rArr; &dArr; 双线向下箭头 &amp;dArr; &hArr; 双线双向箭头 &amp;hArr; &spades; 黑桃符号 &amp;spades; &clubs; 梅花符号 &amp;clubs; &hearts; 红心符号 &amp;hearts; &diams; 方块符号 &amp;diams; &alpha; Alpha符号 &amp;alpha; &beta; Bata符号 &amp;beta; &gamma; Gamma符号 &amp;gamma; &Delta; Delta符号 &amp;Delta; &theta; Theta符号 &amp;theta; &lambda; Lambda符号 &amp;lambda; &Sigma; Sigma符号 &amp;Sigma; &tau; Tau符号 &amp;tau; 特殊符号命名实体十进制编码特殊符号命名实体十进制编码特殊符号命名实体十进制编码&Alpha;&amp;Alpha;&amp;#913;&Beta;&amp;Beta;&amp;#914;&Gamma;&amp;Gamma;&amp;#915;&Delta;&amp;Delta;&amp;#916;&Epsilon;&amp;Epsilon;&amp;#917;&Zeta;&amp;Zeta;&amp;#918;&Eta;&amp;Eta;&amp;#919;&Theta;&amp;Theta;&amp;#920;&Iota;&amp;Iota;&amp;#921;&Kappa;&amp;Kappa;&amp;#922;&Lambda;&amp;Lambda;&amp;#923;&Mu;&amp;Mu;&amp;#924;&Nu;&amp;Nu;&amp;#925;&Xi;&amp;Xi;&amp;#926;&Omicron;&amp;Omicron;&amp;#927;&Pi;&amp;Pi;&amp;#928;&Rho;&amp;Rho;&amp;#929;&Sigma;&amp;Sigma;&amp;#931;&Tau;&amp;Tau;&amp;#932;&Upsilon;&amp;Upsilon;&amp;#933;&Phi;&amp;Phi;&amp;#934;&Chi;&amp;Chi;&amp;#935;&Psi;&amp;Psi;&amp;#936;&Omega;&amp;Omega;&amp;#937;&alpha;&amp;alpha;&amp;#945;&beta;&amp;beta;&amp;#946;&gamma;&amp;gamma;&amp;#947;&delta;&amp;delta;&amp;#948;&epsilon;&amp;epsilon;&amp;#949;&zeta;&amp;zeta;&amp;#950;&eta;&amp;eta;&amp;#951;&theta;&amp;theta;&amp;#952;&iota;&amp;iota;&amp;#953;&kappa;&amp;kappa;&amp;#954;&lambda;&amp;lambda;&amp;#955;&mu;&amp;mu;&amp;#956;&nu;&amp;nu;&amp;#957;&xi;&amp;xi;&amp;#958;&omicron;&amp;omicron;&amp;#959;&pi;&amp;pi;&amp;#960;&rho;&amp;rho;&amp;#961;&sigmaf;&amp;sigmaf;&amp;#962;&sigma;&amp;sigma;&amp;#963;&tau;&amp;tau;&amp;#964;&upsilon;&amp;upsilon;&amp;#965;&phi;&amp;phi;&amp;#966;&chi;&amp;chi;&amp;#967;&psi;&amp;psi;&amp;#968;&omega;&amp;omega;&amp;#969;&thetasym;&amp;thetasym;&amp;#977;&upsih;&amp;upsih;&amp;#978;&piv;&amp;piv;&amp;#982;&bull;&amp;bull;&amp;#8226;&hellip;&amp;hellip;&amp;#8230;&prime;&amp;prime;&amp;#8242;&Prime;&amp;Prime;&amp;#8243;&oline;&amp;oline;&amp;#8254;&frasl;&amp;frasl;&amp;#8260;&weierp;&amp;weierp;&amp;#8472;&image;&amp;image;&amp;#8465;&real;&amp;real;&amp;#8476;&trade;&amp;trade;&amp;#8482;&alefsym;&amp;alefsym;&amp;#8501;&larr;&amp;larr;&amp;#8592;&uarr;&amp;uarr;&amp;#8593;&rarr;&amp;rarr;&amp;#8594;&darr;&amp;darr;&amp;#8595;&harr;&amp;harr;&amp;#8596;&crarr;&amp;crarr;&amp;#8629;&lArr;&amp;lArr;&amp;#8656;&uArr;&amp;uArr;&amp;#8657;&rArr;&amp;rArr;&amp;#8658;&dArr;&amp;dArr;&amp;#8659;&hArr;&amp;hArr;&amp;#8660;&forall;&amp;forall;&amp;#8704;&part;&amp;part;&amp;#8706;&exist;&amp;exist;&amp;#8707;&empty;&amp;empty;&amp;#8709;&nabla;&amp;nabla;&amp;#8711;&isin;&amp;isin;&amp;#8712;&notin;&amp;notin;&amp;#8713;&ni;&amp;ni;&amp;#8715;&prod;&amp;prod;&amp;#8719;&sum;&amp;sum;&amp;#8722;&minus;&amp;minus;&amp;#8722;&lowast;&amp;lowast;&amp;#8727;&radic;&amp;radic;&amp;#8730;&prop;&amp;prop;&amp;#8733;&infin;&amp;infin;&amp;#8734;&ang;&amp;ang;&amp;#8736;&and;&amp;and;&amp;#8869;&or;&amp;or;&amp;#8870;&cap;&amp;cap;&amp;#8745;&cup;&amp;cup;&amp;#8746;&int;&amp;int;&amp;#8747;&there4;&amp;there4;&amp;#8756;&sim;&amp;sim;&amp;#8764;&cong;&amp;cong;&amp;#8773;&asymp;&amp;asymp;&amp;#8773;&ne;&amp;ne;&amp;#8800;&equiv;&amp;equiv;&amp;#8801;&le;&amp;le;&amp;#8804;&ge;&amp;ge;&amp;#8805;&sub;&amp;sub;&amp;#8834;&sup;&amp;sup;&amp;#8835;&nsub;&amp;nsub;&amp;#8836;&sube;&amp;sube;&amp;#8838;&supe;&amp;supe;&amp;#8839;&oplus;&amp;oplus;&amp;#8853;&otimes;&amp;otimes;&amp;#8855;&perp;&amp;perp;&amp;#8869;&sdot;&amp;sdot;&amp;#8901;&lceil;&amp;lceil;&amp;#8968;&rceil;&amp;rceil;&amp;#8969;&lfloor;&amp;lfloor;&amp;#8970;&rfloor;&amp;rfloor;&amp;#8971;&loz;&amp;loz;&amp;#9674;&spades;&amp;spades;&amp;#9824;&clubs;&amp;clubs;&amp;#9827;&hearts;&amp;hearts;&amp;#9829;&diams;&amp;diams;&amp;#9830;&nbsp;&amp;nbsp;&amp;#160;&iexcl;&amp;iexcl;&amp;#161;&cent;&amp;cent;&amp;#162;&pound;&amp;pound;&amp;#163;&curren;&amp;curren;&amp;#164;&yen;&amp;yen;&amp;#165;&brvbar;&amp;brvbar;&amp;#166;&sect;&amp;sect;&amp;#167;&uml;&amp;uml;&amp;#168;&copy;&amp;copy;&amp;#169;&ordf;&amp;ordf;&amp;#170;&laquo;&amp;laquo;&amp;#171;&not;&amp;not;&amp;#172;&shy;&amp;shy;&amp;#173;&reg;&amp;reg;&amp;#174;&macr;&amp;macr;&amp;#175;&deg;&amp;deg;&amp;#176;&plusmn;&amp;plusmn;&amp;#177;&sup2;&amp;sup2;&amp;#178;&sup3;&amp;sup3;&amp;#179;&acute;&amp;acute;&amp;#180;&micro;&amp;micro;&amp;#181&quot;&amp;quot;&amp;#34;&lt;&amp;lt;&amp;#60;&gt;&amp;gt;&amp;#62;&#39;&nbsp;&amp;#39; 常用特殊字符转译字符对照表： 特殊符号命名实体十进制编码空格&amp;nbsp;&amp;#160;全角空格&amp;emsp;&amp;#12288;‘&amp;apos;&amp;#39;“&amp;quot;&amp;#34;(—&amp;#40;)—&amp;#41;&lt;&amp;lt;&amp;#60;&gt;&amp;gt;&amp;#62;[—&amp;#91;]—&amp;#93;{—&amp;#123;}—&amp;#125;´&amp;acute;&amp;#180;°&amp;deg;&amp;#176;®&amp;reg;&amp;#174;©&amp;copy;&amp;#169;]]></content>
      <categories>
        <category>HTML</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>HTML</tag>
        <tag>整理备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RGB颜色值与十六进制颜色]]></title>
    <url>%2Fposts%2Fcolor_rgb_16.html</url>
    <content type="text"><![CDATA[颜色码对照表手机用户建议横屏观看 颜色英文代码形象描述十六进制RGB LightPink浅粉红#FFB6C1255,182,193 Pink粉红#FFC0CB255,192,203 Crimson猩红#DC143C220,20,60 LavenderBlush脸红的淡紫色#FFF0F5255,240,245 PaleVioletRed苍白的紫罗兰红色#DB7093219,112,147 HotPink热情的粉红#FF69B4255,105,180 DeepPink深粉色#FF1493255,20,147 MediumVioletRed适中的紫罗兰红色#C71585199,21,133 Orchid兰花的紫色#DA70D6218,112,214 Thistle蓟#D8BFD8216,191,216 plum李子#DDA0DD221,160,221 Violet紫罗兰#EE82EE238,130,238 Magenta洋红#FF00FF255,0,255 Fuchsia灯笼海棠(紫红色)#FF00FF255,0,255 DarkMagenta深洋红色#8B008B139,0,139 Purple紫色#800080128,0,128 MediumOrchid适中的兰花紫#BA55D3186,85,211 DarkVoilet深紫罗兰色#9400D3148,0,211 DarkOrchid深兰花紫#9932CC153,50,204 Indigo靛青#4B008275,0,130 BlueViolet深紫罗兰的蓝色#8A2BE2138,43,226 MediumPurple适中的紫色#9370DB147,112,219 MediumSlateBlue适中的板岩暗蓝灰色#7B68EE123,104,238 SlateBlue板岩暗蓝灰色#6A5ACD106,90,205 DarkSlateBlue深岩暗蓝灰色#483D8B72,61,139 Lavender熏衣草花的淡紫色#E6E6FA230,230,250 GhostWhite幽灵的白色#F8F8FF248,248,255 Blue纯蓝#0000FF0,0,255 MediumBlue适中的蓝色#0000CD0,0,205 MidnightBlue午夜的蓝色#19197025,25,112 DarkBlue深蓝色#00008B0,0,139 Navy海军蓝#0000800,0,128 RoyalBlue皇家蓝#4169E165,105,225 CornflowerBlue矢车菊的蓝色#6495ED100,149,237 LightSteelBlue淡钢蓝#B0C4DE176,196,222 LightSlateGray浅石板灰#778899119,136,153 SlateGray石板灰#708090112,128,144 DoderBlue道奇蓝#1E90FF30,144,255 AliceBlue爱丽丝蓝#F0F8FF240,248,255 SteelBlue钢蓝#4682B470,130,180 LightSkyBlue淡蓝色#87CEFA135,206,250 SkyBlue天蓝色#87CEEB135,206,235 DeepSkyBlue深天蓝#00BFFF0,191,255 LightBLue淡蓝#ADD8E6173,216,230 PowDerBlue火药蓝#B0E0E6176,224,230 CadetBlue军校蓝#5F9EA095,158,160 Azure蔚蓝色#F0FFFF240,255,255 LightCyan淡青色#E1FFFF225,255,255 PaleTurquoise苍白的绿宝石#AFEEEE175,238,238 Cyan青色#00FFFF0,255,255 Aqua水绿色#00FFFF0,255,255 DarkTurquoise深绿宝石#00CED10,206,209 DarkSlateGray深石板灰#2F4F4F47,79,79 DarkCyan深青色#008B8B0,139,139 Teal水鸭色#0080800,128,128 MediumTurquoise适中的绿宝石#48D1CC72,209,204 LightSeaGreen浅海洋绿#20B2AA32,178,170 Turquoise绿宝石#40E0D064,224,208 Auqamarin绿玉\碧绿色#7FFFAA127,255,170 MediumAquamarine适中的碧绿色#00FA9A0,250,154 MediumSpringGreen适中的春天的绿色#00FF7F0,255,127 MintCream薄荷奶油#F5FFFA245,255,250 SpringGreen春天的绿色#3CB37160,179,113 SeaGreen海洋绿#2E8B5746,139,87 Honeydew蜂蜜#F0FFF0240,255,240 LightGreen淡绿色#90EE90144,238,144 PaleGreen苍白的绿色#98FB98152,251,152 DarkSeaGreen深海洋绿#8FBC8F143,188,143 LimeGreen酸橙绿#32CD3250,205,50 Lime酸橙色#00FF000,255,0 ForestGreen森林绿#228B2234,139,34 Green纯绿#0080000,128,0 DarkGreen深绿色#0064000,100,0 Chartreuse查特酒绿#7FFF00127,255,0 LawnGreen草坪绿#7CFC00124,252,0 GreenYellow绿黄色#ADFF2F173,255,47 OliveDrab橄榄土褐色#556B2F85,107,47 Beige米色(浅褐色)#F5F5DC245,245,220 LightGoldenrodYellow浅秋麒麟黄#FAFAD2250,250,210 Ivory象牙#FFFFF0255,255,240 LightYellow浅黄色#FFFFE0255,255,224 Yellow纯黄#FFFF00255,255,0 Olive橄榄#808000128,128,0 DarkKhaki深卡其布#BDB76B189,183,107 LemonChiffon柠檬薄纱#FFFACD255,250,205 PaleGodenrod灰秋麒麟#EEE8AA238,232,170 Khaki卡其布#F0E68C240,230,140 Gold金#FFD700255,215,0 Cornislk玉米色#FFF8DC255,248,220 GoldEnrod秋麒麟#DAA520218,165,32 FloralWhite花的白色#FFFAF0255,250,240 OldLace老饰带#FDF5E6253,245,230 Wheat小麦色#F5DEB3245,222,179 Moccasin鹿皮鞋#FFE4B5255,228,181 Orange橙色#FFA500255,165,0 PapayaWhip番木瓜#FFEFD5255,239,213 BlanchedAlmond漂白的杏仁#FFEBCD255,235,205 NavajoWhite纳瓦霍白#FFDEAD255,222,173 AntiqueWhite古代的白色#FAEBD7250,235,215 Tan晒黑#D2B48C210,180,140 BrulyWood结实的树#DEB887222,184,135 Bisque(浓汤)乳脂,番茄等#FFE4C4255,228,196 DarkOrange深橙色#FF8C00255,140,0 Linen亚麻布#FAF0E6250,240,230 Peru秘鲁#CD853F205,133,63 PeachPuff桃色#FFDAB9255,218,185 SandyBrown沙棕色#F4A460244,164,96 Chocolate巧克力#D2691E210,105,30 SaddleBrown马鞍棕色#8B4513139,69,19 SeaShell海贝壳#FFF5EE255,245,238 Sienna黄土赭色#A0522D160,82,45 LightSalmon浅鲜肉(鲑鱼)色#FFA07A255,160,122 Coral珊瑚#FF7F50255,127,80 OrangeRed橙红色#FF4500255,69,0 DarkSalmon深鲜肉(鲑鱼)色#E9967A233,150,122 Tomato番茄#FF6347255,99,71 MistyRose薄雾玫瑰#FFE4E1255,228,225 Salmon鲜肉(鲑鱼)色#FA8072250,128,114 Snow雪#FFFAFA255,250,250 LightCoral淡珊瑚色#F08080240,128,128 RosyBrown玫瑰棕色#BC8F8F188,143,143 IndianRed印度红#CD5C5C205,92,92 Red纯红#FF0000255,0,0 Brown棕色#A52A2A165,42,42 FireBrick耐火砖#B22222178,34,34 DarkRed深红色#8B0000139,0,0 Maroon栗色#800000128,0,0 White纯白#FFFFFF255,255,255 WhiteSmoke白烟#F5F5F5245,245,245 Gainsboro亮灰色#DCDCDC220,220,220 LightGrey浅灰色#D3D3D3211,211,211 Silver银白色#C0C0C0192,192,192 DarkGray深灰色#A9A9A9169,169,169 Gray灰色#808080128,128,128 DimGray暗淡的灰色#696969105,105,105 Black纯黑#0000000,0,0]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>HTML</tag>
        <tag>整理备份</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[为什么用Markdown？Markdown基本语法总结]]></title>
    <url>%2Fposts%2Fmarkdown-basic.html</url>
    <content type="text"><![CDATA[前言 有了word和txt，markdown却越来越多的人使用。本文将介绍Markdown的基础语法，方便本人进行记忆和复习，顺便进行实践和新知识的测试。忘记了就记得回来看看哟！学习了新内容会不定期更新哟ヾ(≧▽≦*)o Markdown编辑器下载地址：MarkdownPad2但在这里我推荐Visual Studio Code，感觉是神奇，界面舒服，功能强大。即使没有网络,也能实时预览渲染的格式。而且各个操作系统都可以下载。 基本语法： 标题 字体 引用 分割线 超链接 邮箱 图片 列表 表格 首行缩进 转义字符 换行 段落 单行代码 代码区块 进阶操作： 快捷键：点击了解 HTML代码完成进阶操作上下标 特殊符号选择字体和字体大小 字体颜色及背景颜色 复杂表格 页内跳转页内隐藏(暂无编写) 为什么使用Markdown？先说说word的缺点[1]: 难以专心：写Word文档的时候，我们经常浪费大量时间在Word本身上，特别是那80%我们用不到的功能。 浪费力气在排版上：使用Word时，我们会花费大量力气去排版，试图让文档变得漂亮一些。是粗体还是斜体，是宋体还是黑体，对创作来说，有那么重要吗？ 难以共同协作：极其难用的修订与审阅功能，使得合作者一起修改一个又一个文档变得十分困难。 难以自动的版本跟踪：每一位自杀的写作者的电脑文档里面，都必然有一个Word文档，从V1.0到V20.0的无数版本…但是每一个支持markdown写作方式的在线网站或者是软件，都必然提供强大功能的“版本跟踪”[2]。 比起TXT和Word，Markdown的优势: 比起word，HTML，虽然它功能没上述二者强，但它易读（类word）、易写（语法简单）、易更改（纯文本，txt）。 比起txt，功能又比纯文本强。 专注写作，而不是关注排版。排版更容易，也很美观。 兼容HTML,可以转换为HTML格式发布。可以使用CSS使得页面美化 跨平台使用。 越来越多的网站支持Markdown。 当然除了优点，Markdown的缺点：需要记一些语法（当然，是很简单。五分钟学会）。而且有些平台不支持Markdown编辑模式。 是不是心动了呢？我们接下来就学习一些Markdown的基本语法，日常写作完全没问题！ 基本语法1.标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：#后面一定要加空格！！#后面一定要加空格！！#后面一定要加空格！！重要的事情说三遍。 示例： 这里有空格 ↓ # 这是一级标题 ## 这是二级标题 ### 这是三级标题 #### 这是四级标题 ##### 这是五级标题 ###### 这是六级标题 ###### 这是六级标题 #### （如果是强迫症，为了美观。后面随便加几个#不影响） ↑ 这里有空格 效果如下： 2.字体 加粗：要加粗的文字左右分别用两个*号包起来 斜体：要倾斜的文字左右分别用一个*号包起来 斜体加粗:要倾斜和加粗的文字左右分别用三个*号包起来 删除线:要加删除线的文字左右分别用两个~~号包起来 示例： **这是加粗的文字** *这是倾斜的文字* ***这是斜体加粗的文字*** ~~这是加删除线的文字~~ 效果如下:这是加粗的文字这是倾斜的文字这是斜体加粗的文字这是加删除线的文字 3.引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…可以一直加下去，但没什么用，用1-2个就可以啦。 示例： &gt;这是引用的内容 &gt;&gt;这是引用的内容 &gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 4.分割线三个或者三个以上的 - 或者 * 都可以。 示例： --- ---- *** ***** 可以看到，显示效果是一样的。效果如下： 5.超链接语法： 方法1： [超链接名](超链接地址 &quot;超链接title&quot;) title可加可不加，鼠标放在链接上所显示的数字 方法2：//hexo搭建的博客似乎不能使用这个方法 [超链接名][number] [number]:超链接地址 &quot;超链接title&quot; 方法3： &lt;超链接地址&gt; &lt;邮箱&gt; //可以 示例： [百度](http://baidu.com &quot;度娘&quot;) [腾讯QQ][1] [1]:http://qq.com &quot;企鹅&quot; &lt;https://www.ahh666.com&gt; &lt;ahaohe@foxmail.com&gt; //可以直接跳转至系统邮箱发送邮件 效果如下：方法1：百度方法2：自行输入到markdown上实践。方法3：https://www.ahh666.com&#97;&#104;&#x61;&#111;&#x68;&#101;&#64;&#102;&#111;&#x78;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#x6d; 6.图片语法： ![图片alt](图片地址 &quot;图片title&quot;) markdown： 图片alt就是显示在图片下面的文字，相当于对图片内容的解释。 图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加 hexo搭建的博客： 图片title是显示在图片下方的文字，不添加就不显示。图片alt似乎没用。 示例： ![alt](https://ahh666.com/pic/touxiang.jpg &quot;头像&quot;) 效果如下： 7.列表—-无序列表—-语法：无序列表用 - + * 任何一种都可以 这里有空格 ↓ - 列表内容 + 列表内容 * 列表内容 注意：- + * 跟内容之间都要有一个空格！！跟内容之间都要有一个空格！！跟内容之间都要有一个空格！！ 效果如下： 列表内容 列表内容 列表内容 —-有序列表—-语法：数字加点 这里有空格 ↓ 1. 列表内容 1. 列表内容 2. 列表内容 //序号并无关系，会自动帮你排序 注意：序号跟内容之间要有空格！！序号跟内容之间要有空格！！序号跟内容之间要有空格！！ 效果如下： 列表内容 列表内容 列表内容 —-列表嵌套—-上一级和下一级之间敲3个空格即可 示例： - 一级无序列表内容 1. 二级有序列表内容 * 三级无序列表 - 三级无序列表 + 三级无序列表 2. 二级有序列表内容 博客效果如下： 一级无序列表内容 二级有序列表内容 三级无序列表 三级无序列表 三级无序列表 二级有序列表内容 markdown2下的效果： 8.表格语法： 表头|表头|表头 -|:-:|-: 内容|内容|内容 内容|内容|内容 第二行分割表头和内容。 -符号有一个就行。如果为了写作时对齐看得方便，多加几个也没问题 文字默认居左 -两边加：表示文字居中 -右边加：表示文字居右 注：原生的语法两边都要用 | 包起来。此处不示例了。 示例： name | 111 | 222 - | :-: | -: aaa | bbb fff | ggg 效果如下： name 111 222 aaa bbb fff ggg 9.代码—-单行代码—-单行代码：代码之间分别用一个反引号包起来 `代码内容` 示例： if语句中相等要用2个等号，代码： `if i==0` 效果如下： if语句中相等要用2个等号，代码： if i==0 —-代码区块—-注意：以下方法中，方法1适合hexo博客和markdown2，方法2貌似只适合hexo博客，不适合原生 方法1：使用制表符Tab或四个空格(每行前添加）//生成无行数排序显示的代码框注意：当在第1级列表中用代码区块就要有2个“Tab”或8个空格。2级列表时就要有3个“Tab”或12个空格。以此类推…… 示例： function test(){ echo &quot;测试&quot;; } test(); 效果如下: function test(){ echo &quot;测试&quot;; } test(); 方法2：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 //生成有行数排序显示的代码框 示例： (123456789 function test()&#123; echo &quot;测试&quot;; &#125; test(); (```) 注：为了防止转译，前后三个反引号处加了()，实际是没有的。这里只是用来演示，实际中去掉()即可。效果如下 function test(){ echo “测试”;}test();` 在2个代码区块间换行加入&nbsp;可以隔开2个代码区块 示例： 这里是4个空格或者制表符“TAB” ↓ 123456 78 &amp;nbsp; //这里一定要有个空行 666 777 效果如下： 123456 78 &nbsp; 666 777 10.转义字符在特殊字符，如*、[、&gt;等前面加\可使特殊格式字符转换为正常字符打出 （有序列表符号如1.，须在. 前加\，反引号`前加\） Markdown语法： \\ \` \* \_ \{\} \[\] \(\) \# \+ \- \. \! 效果如下：\`*_{}[]()#+-.! 11.换行与段落–换行–换行符：一行结束时输入两个空格 示例： 这里有2个空格 ↓↓ one123456 78 这里没有空格 ↓↓ two123456 78 //注意：博客中似乎只需要回车就可以换行了 效果如下: 那么怎么多行换行？可以使用HTML语法的&lt;br/&gt;还有很多markdown基本语法无法实现的东西，都可以使用HMTL的语法。在下方我也会随便说点HTML在markdown的应用。点击跳转到HMTL讲解段落 –段落–在markdown语言中,唯一决定两行文字是否是段落的,就在于这两行文字之间是否有空行.如果这两行文字之间,有空行了,就代表,这两行文字为两个段落,如果这两行文字之间,没有空行,仅仅换行,就代表这两行文字是属于同一个段落.即使是在一行文字中的末尾,添加了两个空格之后换行,这两个行文字依旧是一个段落. [6] 示例： 这里有2个空格 ↓↓ one123456 78 //这个还是一个段落虽然是换行了 two123456 78 //123456是一个段落，78是一个段落 对于中文用户，首行缩进是个问题。这里先不讲，单独出来讲。首行缩进在下文中讲解,点击跳转 –关于空行–无论第一行的 123456 与第二行的 78 在编辑的时候有多少个空行(只要下一行只有回车或者space没有其他的字符就算空行),在渲染之后,只隔着一行。 示例： 123456 78 效果如下： 123456 78 12.邮箱在 超链接 中 方法3 有讲解和例子,点击跳转 13.首行缩进本来想放在段落里讲的，但感觉对于中文用户来说蛮重要的，就单独说了。 由于markdown语法主要考虑的是英文，所以对于中文的首行缩进并不太友好，两种方法都可以完美解决这个问题。 把输入法由半角改为全角。 两次空格之后就能够有两个汉字的缩进。[7] 在开头的时候，先输入下面的代码，然后紧跟着输入文本即可。分号也不要掉。[7]直接写代码 半方大的空白&amp;ensp;或&amp;#8194; //半角 全方大的空白&amp;emsp;或&amp;#8195; //全角 不断行的空白格&amp;nbsp;或&amp;#160; 注意：分号！！分号！！分号！！代码结尾要加分号; 示例： &amp;ensp;&amp;#8194;这里是一段 &amp;emsp;&amp;#8195;这里是二段 &amp;nbsp;&amp;#160;这里是三段 效果如下： &ensp;&#8194;这里是一段 &emsp;&#8195;这里是二段 &nbsp;&#160;这里是三段 快捷键 输出后的效果 Markdown 快捷键 加粗 **text** Ctrl/⌘ + B 斜体 *text* Ctrl/⌘ + I 超链接 [title](http://) Ctrl/⌘ + K 单行代码 `code` Ctrl/⌘ + Shift + K 图片 ![alt](http://) Ctrl/⌘ + Shift + I 列表 * - + item Ctrl + L 引用 &gt; quote Ctrl + Q H1标题 # Heading H2标题 ## Heading Ctrl/⌘ + H H3标题 ### Heading Ctrl/⌘ + H (x2) 使用hmtl代码来完成进阶操作Markdown可以和HTML的语法兼容，可以通过HTML完成各种特殊符号，达到word的效果 1.上下标 标签 写法 效果 上标 x&lt;sup&gt;10&lt;/sup&gt; x10 下标 x&lt;sub&gt;2&lt;/sub&gt;=2 x2=2 也可以结合起来x&lt;sub&gt;2&lt;/sub&gt;&lt;sup&gt;10&lt;/sup&gt;=2效果如下： x210=2 2.特殊符号点击查看HTML特殊符号大全 3.字体颜色、大小和背景颜色RGB颜色英文、十六进制代码网上都有。自己百度吧，但我也在这里列一下常用的颜色，供自己备份。点击查看颜色代码大全 HTML语法[8]： &lt;font face=&quot;字体代码&quot;&gt;我是内容&lt;/font&gt; &lt;font color=颜色代码 size=字号大小&gt;我是内容&lt;/font&gt; &lt;font color=颜色代码 size=字号大小 face=&quot;字体代码&quot;&gt;我是内容&lt;/font&gt; &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=颜色代码&gt;我是内容&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; //Size：规定文本的尺寸大小。可能的值：从 1 到 7 的数字。浏览器默认值是 3。 示例： &lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt; &lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt; &lt;font color=green size=5&gt;color=green&lt;/font&gt; &lt;font color=#0099ff size=5 face=&quot;楷体&quot;&gt;color=#0099ff size=5 face=&quot;楷体&quot;&lt;/font&gt; &lt;table&gt;&lt;tr&gt;&lt;td bgcolor=Red&gt;这里的背景色是：Red&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt; 效果如下： 我是华文彩云 我是微软雅黑 color=green color=#0099ff size=5 face=”楷体” 这里的背景色是：Red 另一种字体大小快捷方式： &lt;small&gt;我是内容1&lt;/small&gt; //变小 我是内容2 //正常 &lt;big&gt;我是内容3&lt;/big&gt; //变大 &lt;center&gt;我是内容4&lt;/center&gt; //居中 效果如下：我是内容1我是内容2 我是内容3 我是内容4 4.页内跳转 在跳转的地方定义一个锚点(id)：&lt;span id=&quot;jump&quot;&gt;跳转到的地方&lt;/span&gt; 使用markdown的超链接：[点击跳转](#jump) 示例： &lt;span id=&quot;#kjj&quot;&gt;快捷键&lt;/span&gt; //在本文的 快捷键 讲解的地方设置锚点 [点击跳转1](#kjj) &lt;a href=&quot;#kjj&quot;&gt;点击跳转2&lt;/a&gt; //2个超链接设置方法效果是一样的 效果如下：跳转到本文列出快捷键的地方点击跳转1点击跳转2 5.复杂表格主要用到了HMTL的一个标签 /* *rowspan：规定单元格可横跨的行数。横跨几行属性值就写几，如上图中横跨7行，则rowspan=”7” *colspan：规定单元格可纵深的列数。 */ &lt;table&gt; &lt;tr&gt; &lt;td&gt;列一&lt;/td&gt; &lt;td&gt;列二&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td colspan=&quot;2&quot;&gt;&lt;center&gt;合并行&lt;/center&gt;&lt;/td&gt; //横跨2个列，就是将2个列合并成1个行。居中行内内容。 &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;列一&lt;/td&gt; &lt;td&gt;列二&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td rowspan=&quot;2&quot;&gt;合并列&lt;/td&gt; //横跨2个行，就是将2个行合并成1个列 &lt;td &gt;行二列二&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td &gt;行三列二&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; 效果如下： 列一 列二 合并行列一 列二 合并列 行二列二 行三列二 但发布到博客上出现了问题：表格上方出现了许多空白。查看源码看到许多换行&lt;br&gt; 使用编辑器写东西再用Hexo发布到博客上，会有这种情况出现。如果是编辑器预览和CSDN等支持Markdown的网站不会发生这种情况。 解决方法：将代码改为紧凑模式（即不用回车换行）&lt;table&gt;&lt;tr&gt;&lt;td&gt;列一&lt;/td&gt; &lt;td&gt;列二&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td colspan=&quot;2&quot;&gt;&lt;center&gt;合并行&lt;/center&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;列一&lt;/td&gt; &lt;td&gt;列二&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt;&lt;td rowspan=&quot;2&quot;&gt;合并列&lt;/td&gt; &lt;td &gt;行二列二&lt;/td&gt; &lt;/tr&gt;&lt;tr&gt; &lt;td &gt;行三列二&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 5.页内隐藏等待编写 参考文献 ☝[1] Markdown写作浅谈 . 简书 [引用日期 2019-4-8]☝[2] 可能是最通俗的一篇介绍markdown的文章了 . 魔术师 [引用日期 2019-4-8]☝[3] 最实用的 Markdown 语法教程 . KKKnight_ [引用日期 2019-4-8]☝[4] Markdown基本语法. 高鸿祥 [引用日期 2019-4-8]☝[5] markdown总结. 夜千寻墨 [引用日期 2019-4-8]☝[6] markdown语法之换行与段落. java持续实践 [引用日期 2019-4-9]☝[7] markdown中实现首行缩进的两种方法. mountzf [引用日期 2019-4-9]☝[8] markdown 语法之字体、字号、颜色以及背景色. fan_yufan [引用日期 2019-4-9]]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本博客美化所使用的插件和修改步骤]]></title>
    <url>%2Fposts%2Fblog-meihua.html</url>
    <content type="text"><![CDATA[记录自己在美化博客中修改的地方，基本上都是参考其他人。也有很多别人的原文。Next主题官方文档：点击查看 首页指定文章隐藏 首页显示标签 鼠标点击出现变化的文字效果 指定页面侧栏不显示文章目录 阅读热度排行 Gitalk评论系统 1.有点忙，以后再说5555 2.首页指定文章隐藏 首页文章隐藏参考淡之梦的【Hexo】 设置首页隐藏指定文章 首页显示标签(原创) 首页文章隐藏和显示标签基本上是一个地方改的，而且如果2个功能都添加，修改上还会相互关联，所以2个都会提到。 Step1: 基础设置 在指定文章中自定义添加一个notshow参数，值为true，用来提供判断 --- title: 标题党 date: tags: categories: notshow: true //这里哟 --- 觉得每次都要添加麻烦的可以在\scaffolds\post.md中直接修改成 --- title: {{ title }} date: {{ date }} categories: tags: notshow: 是否在首页显示，为空显示，true为不显示 --- Step2: 修改主题的index.swig 主题可能各不一样，但原理都是一样的，我拿我使用的next主题来示范。路径：\themes\next\layout\index.swig找到以下代码： 123456789&#123;% block content %&#125; &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;% for post in page.posts %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include &apos;_partials/pagination.swig&apos; %&#125;&#123;% endblock %&#125; 用if语句判断notshow是否为true，为true则不显示；其余则显示。改为： 12345678910111213&#123;% block content %&#125; &lt;section id=&quot;posts&quot; class=&quot;posts-expand&quot;&gt; &#123;% for post in page.posts %&#125; &lt;!-- 在这里判断首页隐藏是否为true --&gt; &#123;% if post.notshow != true %&#125; &#123;&#123; post_template.render(post, true) &#125;&#125; &#123;% endif %&#125; &lt;!-- 判断结束 --&gt; &#123;% endfor %&#125; &lt;/section&gt; &#123;% include &apos;_partials/pagination.swig&apos; %&#125;&#123;% endblock %&#125; 3.首页显示标签 首页文章隐藏参考淡之梦的【Hexo】 设置首页隐藏指定文章 首页显示标签(原创) 因为文章首页隐藏的notshow会影响到首页显示标签,所以会在修改的一部分中提到首页隐藏的内容。 具体内容在这里：点击查看 4.鼠标点击文字效果(颜色、大小会变化)参考了Hexo 博客优化之博客美化–TRHX作者的内容，但发现不论是该作者还是网上其他方案都雷同，没有我想要的效果。（我想要的效果是颜色、大小会变化）那我就根据现有代码自行修改了，很简单。 在 /themes/next/source/src/js 下新建文件 click_show_text.js，在 click_show_text.js 文件中添加以下代码 123456789101112131415161718192021222324252627282930313233343536373839var a_idx = 0,b_idx = 0;c_idx = 0;jQuery(document).ready(function($) &#123; $(&quot;body&quot;).click(function(e) &#123; var a = new Array(&quot;欢迎您&quot;, &quot;么么哒&quot;, &quot;你真好&quot;, &quot;棒棒哒&quot;, &quot;真可爱&quot;, &quot;好厉害&quot;, &quot;喜欢你&quot;, &quot;真聪明&quot;, &quot;爱你哦&quot;, &quot;太强了&quot;, &quot;祝福你&quot;, &quot;666&quot;), b = new Array(&quot;#09ebfc&quot;, &quot;#ff6651&quot;, &quot;#ffb351&quot;, &quot;#51ff65&quot;, &quot;#5197ff&quot;, &quot;#a551ff&quot;, &quot;#ff51f7&quot;, &quot;#ff518e&quot;, &quot;#ff5163&quot;, &quot;#efff51&quot;), c = new Array(&quot;12&quot;, &quot;14&quot;, &quot;16&quot;, &quot;18&quot;, &quot;20&quot;, &quot;22&quot;, &quot;24&quot;, &quot;26&quot;, &quot;28&quot;, &quot;30&quot;); var $i = $(&quot;&lt;span/&gt;&quot;).text(a[a_idx]); a_idx = (a_idx + 1) % a.length; b_idx = (b_idx + 1) % b.length; c_idx = (c_idx + 1) % c.length; var x = e.pageX, y = e.pageY; $i.css(&#123; &quot;z-index&quot;: 5, &quot;top&quot;: y - 20, &quot;left&quot;: x, &quot;position&quot;: &quot;absolute&quot;, &quot;font-weight&quot;: &quot;bold&quot;, &quot;font-size&quot;: c[c_idx] + &quot;px&quot;, &quot;color&quot;: b[b_idx] &#125;); $(&quot;body&quot;).append($i); $i.animate(&#123; &quot;top&quot;: y - 180, &quot;opacity&quot;: 0 &#125;, 3000, function() &#123; $i.remove(); &#125;); &#125;); setTimeout(&apos;delay()&apos;, 2000);&#125;);function delay() &#123; $(&quot;.buryit&quot;).removeAttr(&quot;onclick&quot;);&#125; 其中的文字、颜色可以根据你自己的创意替换为其他，然后在 themes\next\layout\_layout.swig 文件末尾添加以下代码： 1234&lt;!--单击显示文字--&gt;&#123;% if theme.clickword %&#125;&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/click_show_text.js&quot;&gt;&lt;/script&gt;&#123;% endif %&#125; 再主题配置文件themes\next\_config.yml的末尾添加配置，方便以后开关效果。 #点击出现文字 clickword: true 5.使自定义about页面侧栏不显示文章目录原文:hexo + next . K丶Aionro [引用日期 4-11] Step1: 新建about页面 也可以随意建其他名字的，比如我热度排行建的是top页面https://ahh666.com/top/ 为了使about页面不显示右侧文章目录sidebar，可以使用如下两种方法： 方法一 页面内不要使用#这种标题的形式 方法二 修改代码路径：next/layout/_macro/sidebar.swig文件，找到相应行的代码添加（也可能某些原因在其他行） 12345678//15行 添加and page.type != &apos;about&apos;，如下：&#123;% if display_toc and toc(page.content).length &gt; 1 and page.type != &apos;about&apos; %&#125;//26行 添加or page.type == &apos;about&apos;，如下：&#123;% if not display_toc or toc(page.content).length &lt;= 1 or page.type == &apos;about&apos; %&#125;//127行 添加and page.type != &apos;about&apos;，如下：&#123;% if display_toc and toc(page.content).length &gt; 1 and page.type != &apos;about&apos; %&#125; 因此根据上面的内容可以举一反三。把about替换为任意你想要的自建页面。 6.阅读热度排行原文：hexo next 新增阅读排行页面 . hoxis [引用日期 4.1] 新增一个阅读排行页面，可以现在本站文章的阅读排行榜，基于 leancloud 的数据实现。 Step1: 新建页面 hexo n page top新建页面，会生成 top 目录，编辑其中自动生成的 index.md 文件，将其中的代码替换如下： 12345678910111213141516171819202122232425&lt;div id=&quot;top&quot;&gt;&lt;/div&gt;&lt;script src=&quot;https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js&quot;&gt;&lt;/script&gt;&lt;script&gt;AV.initialize(&quot;leancloud_appid&quot;, &quot;leancloud_appkey&quot;);&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; var time=0 var title=&quot;&quot; var url=&quot;&quot; var query = new AV.Query(&apos;Counter&apos;); query.notEqualTo(&apos;id&apos;,0); query.descending(&apos;time&apos;); query.limit(1000); query.find().then(function (todo) &#123; for (var i=0;i&lt;1000;i++)&#123; var result=todo[i].attributes; time=result.time; title=result.title; url=result.url; // var content=&quot;&lt;a href=&apos;&quot;+&quot;https://ahh666.com&quot;+url+&quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;br&gt;&quot;+&quot;&lt;font color=&apos;#fff&apos;&gt;&quot;+&quot;阅读次数：&quot;+time+&quot;&lt;/font&gt;&quot;+&quot;&lt;br&gt;&lt;br&gt;&quot;; var content=&quot;&lt;p&gt;&quot;+&quot;&lt;font color=&apos;#1C1C1C&apos;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;/font&gt;&quot;+&quot;&lt;a href=&apos;&quot;+&quot;https://ahh666.com&quot;+url+&quot;&apos;&gt;&quot;+title+&quot;&lt;/a&gt;&quot;+&quot;&lt;/p&gt;&quot;; document.getElementById(&quot;top&quot;).innerHTML+=content &#125; &#125;, function (error) &#123; console.log(&quot;error&quot;); &#125;);&lt;/script&gt; 并将其中的 leancloud_appid、leancloud_appkey 和页面链接ahh666.com替换为你的。 Step2: 配置菜单显示 编辑主题配置文件 themes\next\_config.yml，添加 top： menu: home: / || home top: /top/ || signal 新增菜单栏的显示名称 hexo/theme/next/languages/zh-Hans.yml，同样新增 top 对应的中文： menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 resources: 资源 top: 热度排行 最后，hexo d -g 部署后可以显示。 7.Gitalk评论系统写在另一篇了！点击查看]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客搭建时遇到的一些问题和解决方案]]></title>
    <url>%2Fposts%2Fhexo-problem.html</url>
    <content type="text"><![CDATA[本篇主要记录我建博客遇到的问题，防止自己重复走弯路。建博客的具体步骤可以参考GitHub+Hexo搭建自己的Blog–rosesnow的文章。写的很好，从0到1，基本上是手把手教了。 运行：hexo init 后报错运行：hexo init 后报错/ 创建一个Hexo的新框架 /返回: WARN git clone failed. Copying data instead WARN Failed to install dependencies. Please run &apos;npm install&apos; manually! 安装hexo应该执行npm install -g hexo-cli npm install卡住，速度慢可以使用淘宝 NPM 镜像定制的 cnpm (gzip 压缩支持) 命令行工具代替默认的 npm: npm install -g cnpm --registry=https://registry.npm.taobao.org 这样就可以使用 cnpm 命令来安装模块了： cnpm install 命令 所有npm指令都要用cnpm代替 执行hexo s命令后，页面访问显示Cannot GET/没安装模块。init之后在执行以下npm install git 部署插件 后 hexo g报错报错信息： FATAL bad indentation of a mapping entry at line 81, column 7: repo: git@github.com:AhaoHe/AhaoHe.g ... 本地myblog文件夹下的 _config.yml文件进行配置时:后要加空格 hexo d后回车确认无效这是一个坑。很坑 当出现这个： The authenticity of host &apos;github.com (13.250.177.223)&apos; can&apos;t be established. Are you sure you want to continue connecting (yes/no)? 此时不能回车，要输入yes。 若执行命令hexo deploy报错若执行命令hexo deploy报错：无法连接git或找不到git，则执行如下命令来安装hexo-deployer-git： npm install hexo-deployer-git --save $ npm install hexo-deployer-git –save ERROR Local hexo not found in X:\xxx报错： ERROR Local hexo not found in D:\blog ERROR Try running: &apos;npm install hexo --save&apos; 原因：.gitignore文件里面忽略了node_modules文件夹，所以这个文件夹没有更新上去。所以用npm重新安装即可。 网上说要用cmd，然后cd到blog目录，执行npm install但网上的方法没用，我是这么做解决的： 删除node_modules文件夹 执行npm install/cnpm install server 命令找不到参考hexo官方文档：https://hexo.io/zh-cn/docs/server.html 执行npm install hexo-server --save 之后就可以 hexo server 了 现在来介绍常用的Hexo命令npm install hexo -g #安装Hexonpm update hexo -g #升级hexo init #初始化博客 命令简写 hexo n “我的博客” == hexo new “我的博客” #新建文章hexo g == hexo generate #生成hexo s == hexo server #启动服务预览hexo d == hexo deploy #部署 hexo server #Hexo会监视文件变动并自动更新，无须重启服务器hexo server -s #静态模式hexo server -p 5000 #更改端口hexo server -i 192.168.1.1 #自定义 IPhexo clean #清除缓存，若是网页正常情况下可以忽略这条命令]]></content>
      <categories>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Blog</tag>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fposts%2Fhello-world.html</url>
    <content type="text"><![CDATA[更新日志2019.4.10 加入评论系统(Gitalk) 在关于页面也添加上评论系统，当作留言板。 2019.4.8 开始第一篇正式的长篇文章，4.9号完成 完善关于页面。 创建企业邮箱（3号的时候就创建了，但为了解析不冲突，使得不带www能访问，决定域名备案） 开始域名备案。 2019.4.1 加入热度排行 修改首页，使首页可以展示文章的标签 添加搜索系统 小修小补，发现一些在美化过程中留下的BUG。 2019.3.30 使用各种插件和修改美化博客查看具体内容 建立第一篇文章 腾讯云实名制成功，域名解析成功 Coding和Github双线部署绑定域名失败（根据网上说的，差点以为自己永久被Qiang了，结果我第二天就恢复解析了）。只好作罢，选择Github。 2019.3.28 使用Hexo在Github建站成功 使用Hexo在Coding建站成功 购买域名 生活日志2019.4.8-4.9 开始第一篇正式的长篇文章，4.9号完成【查看第一篇长篇文章】当然，它前面可能还有几篇略长的，但有些内容有可能是之后添加上去的。 决定开始在博客中做日志。 2019.4.3 参加创新实践，准备使用H5制作小游戏，准备暂时搁置博客（然而，并没有）。 在图书馆花一下午看了一堆Unity3D,Cocos2d的书，最后才发现原来用H5技术就可以做一个小游戏了（不用引擎，跨平台，简单等等优点。。那做小游戏为什么要用引擎呢，第一次认识到了H5的强大）。白看了游戏引擎的书（😭喷血） 开始学习Js。 在修改博客和写文章放松之余，去了解了下Js做游戏的实例练手，结果无意发现了一位大佬vinlic，明明是同龄人，结果技术比我高出肉眼无法看见的高度。在2016年就做了第一个H5魔塔（哈哈，那时我还在努力高考）。他高考虽然成绩不好，但却热爱编程，可以说是狂热。他坚信高考不是唯一出路，高中就只爱学编程（赞同！！且佩服）。他考上的大学虽然一般，数学算法也不太行，但他的能力和经验却可能比一本的学生还强。虽然我早知道我的不足，但没想到差距这么大。游戏和篮球比赛给我带来的好胜心（看来游戏也不是啥好处也没给我😝）促使更加坚定要记录好学习内容。我资质可能不好，但好记性不如烂笔头！ 在Github上见识到了更多大佬，就不一一举例啦。 2019.3.30-4.1 感觉浪费了一堆时间在修改无意义的博客颜值。（关键最后还是被我删了）这是我的坏毛病，太喜欢纠结一些无关紧要的小细节。 明明是没课+放假，却被这种浪费时间的细节弄得睡眠严重不足。（🙃） 2019.3.27 感觉虚度了很多时光，在招聘实习中发现了自己的不足。 决定建一个博客记录自己的学习。 “你努力了，成绩没有多大改观，这并不能证明你没用，而是代表你在赎罪，毕竟你总得为过去的懒散付出点代价。” ​​​ ——几几咕 Hello WorldWelcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.留作纪念，不删了。哈哈 Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
